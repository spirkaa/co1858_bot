import logging
import ujson
import re
from aiotg import TgBot
from content.schedule import send_schedule, send_bell
from content.scraper import send_news, send_video
from database import db_check_or_create, db_select
from keyboard import send_keyboard, keyboard, teachers_btns
import settings

logger = logging.getLogger("co1858_bot")

with open("config.json") as cfg:
    config = ujson.load(cfg)

bot = TgBot(**config)


space = r'[\s\-]*'
teachers_re = '|'.join(settings.TEACHERS)
cmds_re = '|'.join(settings.CMDS)
groups_re = r'[0-9]{1,2}' + space + '[–∞–±–≤–≥–∫–ª—Å–ê–ë–í–ì–ö–õ–°]'
add_space = re.compile('(^[0-9]{1,2})(' + space + ')([–∞–±–≤–≥–∫–ª—Å–ê–ë–í–ì–ö–õ–°])')
regex = r'/?(({1})|({2})){0}({3})?'.format(
    space, teachers_re, groups_re, cmds_re)


@bot.command(regex)
async def schedule(chat, match):
    logger.debug('%s (%s) %s', chat.sender, chat.sender['id'], match.groups())
    if match.group(2):
        who, cmd = match.group(2, 4)
    if match.group(3):
        who = re.sub(add_space, r'\1 \3', match.group(3))
        cmd = match.group(4)
    await send_schedule(chat, who.capitalize(), cmd)


@bot.command(r'(/menu|/?–º–µ–Ω—é)')
async def menu(chat, match):
    text = '–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá'
    kb = keyboard()
    await db_check_or_create(**chat.sender)
    await send_keyboard(chat, match.group(1), text, kb)


@bot.command(r'(/teachers|/?—É—á–∏—Ç–µ–ª—è)')
async def teachers_menu(chat, match):
    text = 'üíº –í—ã–±–µ—Ä–∏ —É—á–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–º–µ–Ω—é –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è)'
    kb = keyboard(teachers_btns())
    await send_keyboard(chat, match.group(1), text, kb)


@bot.command(r'(/groups|/?–∫–ª–∞—Å—Å—ã)')
async def groups_menu(chat, match):
    text = 'üë• –í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–º–µ–Ω—é –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è)'
    kb = keyboard(settings.GROUPS[:])
    await send_keyboard(chat, match.group(1), text, kb)


@bot.command(r'(/bell|/?–∑–≤–æ–Ω–∫–∏)')
async def bell(chat, match):
    logger.info('%s: –ó–≤–æ–Ω–∫–∏', chat.sender['id'])
    await send_bell(chat)


@bot.command(r'(/news|/?–Ω–æ–≤–æ—Å—Ç–∏)')
async def news(chat, match):
    logger.info('%s: –ù–æ–≤–æ—Å—Ç–∏', chat.sender['id'])
    await send_news(chat)


@bot.command(r'(/video|/?–≤–∏–¥–µ–æ)')
async def video(chat, match):
    logger.info('%s: –í–∏–¥–µ–æ', chat.sender['id'])
    await send_video(chat)


@bot.command(u"\U0001F4F0" + r' (\d{1,2})\. (.*)')
async def news_choose(chat, match):
    logger.info('%s: –ù–æ–≤–æ—Å—Ç–∏ –º–µ–Ω—é', chat.sender['id'])
    await send_news(chat, int(match.group(1)))


@bot.command(u"\U0001F3A5" + r' (\d{1,2})\. (.*)')
async def video_choose(chat, match):
    logger.info('%s: –í–∏–¥–µ–æ –º–µ–Ω—é', chat.sender['id'])
    await send_video(chat, int(match.group(1)))


@bot.command(r'/msg (.*)')
async def admin_msg(chat, match):
    if chat.sender['id'] == 133914054:
        subscribed_users = await db_select('msg')
        for chat in subscribed_users:
            logger.info('–ê–¥–º–∏–Ω. —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ %s', chat.id)
            await bot.send_message(chat.id, match.group(1))
    else:
        logger.info('Access denied for %s. Echo: %s',
                    chat.sender['id'],
                    match.group(1))
        await chat.reply(match.group(1))


@bot.command(r'(/start)')
async def start(chat, match):
    kb = keyboard()
    await db_check_or_create(**chat.sender)
    await send_keyboard(chat, match.group(1), settings.START_TEXT, kb)


@bot.default
@bot.command(r'(/?help)')
async def usage(chat, match):
    kb = keyboard()
    if isinstance(match, dict):
        chat_text = match['text']
    else:
        chat_text = match.group(1)
    await send_keyboard(chat, chat_text, settings.HELP_TEXT, kb)


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s [%(name)s:%(lineno)s] %(levelname)s - %(message)s',
        level=logging.DEBUG)
    bot.run()
